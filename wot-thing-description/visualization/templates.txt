prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix : <http://w3c.github.io/wot-thing-description/visualization#>
template :main(?ns) {
    "digraph {"
        st:call-template(:classes, ?ns)
        st:call-template(:associations, ?ns)
        st:call-template(:subClassRelations, ?ns)
    "}"
} where {}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix : <http://w3c.github.io/wot-thing-description/visualization#>
template :classes(?ns) {
    ?name " [shape=none,label=<"
        "<table border=\"0\" cellborder=\"1\" cellspacing=\"0\" color=\"#8ccbf2\">"
            "<tr><td bgcolor=\"#8ccbf2\">"
                format { "<b><font color=\"#c83500\" face=\"mono\">%s</font></b>" ?name }
            "</td></tr>"
            # see also ../templates.txt (custom id property)
            if(?class = <https://www.w3.org/2019/wot/td#Thing>,
            concat("<tr><td align=\"left\" bgcolor=\"#ddeeff\">",
                "<font color=\"#c83500\" face=\"mono\">@context</font>",
                " : ",
                "<i><font color=\"#c83500\" face=\"mono\">anyURI</font> or Array</i>",
                " <i>(mandatory)</i>",
                "</td></tr>",
                "<tr><td align=\"left\" bgcolor=\"#ddeeff\">",
                "<font color=\"#c83500\" face=\"mono\">@type</font>",
                " : ",
                "<i>(Array of) </i><font color=\"#c83500\" face=\"mono\">string</font>",
                "</td></tr>",
                "<tr><td align=\"left\" bgcolor=\"#ddeeff\">",
                "<font color=\"#c83500\" face=\"mono\">id</font>",
                " : ",
                "<font color=\"#c83500\" face=\"mono\">anyURI</font>",
                " <i>(mandatory)</i>",
                "</td></tr>"
            ), "")
            if(?class = <https://www.w3.org/2019/wot/td#InteractionPattern>,
            concat("<tr><td align=\"left\" bgcolor=\"#ddeeff\">",
                "<font color=\"#c83500\" face=\"mono\">@type</font>",
                " : ",
                "<i>(Array of) </i><font color=\"#c83500\" face=\"mono\">string</font>",
                "</td></tr>"
            ), "")
            if(?class = <https://www.w3.org/2019/wot/json-schema#DataSchema>,
            concat(
                "<tr><td align=\"left\" bgcolor=\"#ddeeff\">",
                "<font color=\"#c83500\" face=\"mono\">@type</font>",
                " : ",
                "<i>(Array of) </i><font color=\"#c83500\" face=\"mono\">string</font>",
                "</td></tr>"
            ), "")
            if(?class = <https://www.w3.org/2019/wot/security#SecurityScheme>,
            concat(
                "<tr><td align=\"left\" bgcolor=\"#ddeeff\">",
                "<font color=\"#c83500\" face=\"mono\">@type</font>",
                " : ",
                "<i>(Array of) </i><font color=\"#c83500\" face=\"mono\">string</font>",
                "</td></tr>"
            ), "")
            st:call-template(:attributes, ?class)
        "</table>"
    ">];"
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class .
    filter(strstarts(str(?class), str(?ns)))
    bind (strafter(str(?class), "#") as ?name)
}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix : <http://w3c.github.io/wot-thing-description/visualization#>
template :attributes(?class) {
    "<tr><td align=\"left\" bgcolor=\"#ddeeff\">"
        st:call-template(:attribute, ?class, ?prop)
    "</td></tr>" ; separator = ""
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           sh:property ?propShape .
    ?propShape sh:path ?prop ;
               sh:datatype ?datatype
}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix jsonld: <http://www.w3.org/ns/json-ld#>
prefix : <http://w3c.github.io/wot-thing-description/visualization#>
template :attribute(?class ?prop) {
    format {
        "<font color=\"#c83500\" face=\"mono\">%s</font>"
        st:call-template(:label, ?prop)
    }
    " : "
    format {
        "%s<font color=\"#c83500\" face=\"mono\">%s</font>"
        if(?prop = <https://www.w3.org/2019/web-linking#forOperationType> ||
           ?prop = <https://www.w3.org/2019/wot/td#security> ||
           ?prop = <https://www.w3.org/2019/wot/security#scopes>,
           concat("(Array of) "),
           if(?array,
              "Array of ",
              if(?map, "Map of ", "")))
        st:call-template(:label, ?datatype)
    }
    format { "%s" if(?mandatory, " <i>(mandatory)</i>", "") }
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           sh:property ?propShape .
    ?propShape sh:path ?prop ;
               sh:datatype ?datatype ;
    optional { ?propShape sh:minCount ?count }
    optional {
        ?mSet a jsonld:Mapping ;
           jsonld:iri ?prop ;
           jsonld:container jsonld:set
    }
    optional {
        ?mIndex a jsonld:Mapping ;
        jsonld:iri ?prop ;
        jsonld:container jsonld:index
    }
    bind (bound(?count) as ?mandatory)
    bind (bound(?mSet) as ?array)
    bind (bound(?mIndex) as ?map)
    bind (bound(?def) as ?hasDef)
}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix jsonld: <http://www.w3.org/ns/json-ld#>
prefix : <http://w3c.github.io/wot-thing-description/visualization#>
template :associations(?ns) {
    ?source " -> " ?dest " [label=<"
        "<font color=\"#c83500\" face=\"mono\">"
            format { "%s" st:call-template(:label, ?prop) }
        "</font>"
    ">,headlabel="
        format {
            "\"%s..%s\""
            ?min
            if(?prop = <https://www.w3.org/2019/wot/json-schema#items>, "*", ?max)
        }
    "];"
    (if (?ext, st:call-template(:externalClass, ?dest), ""))
} where {
    ?sourceShape a sh:NodeShape ;
           sh:targetClass ?sourceClass ;
           sh:property ?propShape .
    ?propShape sh:path ?prop ;
               sh:class ?destClass .
    optional { ?propShape sh:minCount ?count }
    optional {
        ?m a jsonld:Mapping ;
           jsonld:iri ?prop ;
           jsonld:container jsonld:set
    }
    filter (isIRI(?sourceClass) && isIRI(?destClass))
    filter (strstarts(str(?sourceClass), str(?ns)))
    bind (strafter(str(?sourceClass), "#") as ?source)
    bind (strafter(str(?destClass), "#") as ?dest)
    bind (!strstarts(str(?destClass), str(?ns)) as ?ext)
    bind (if(bound(?count), ?count, "0") as ?min)
    bind (if(bound(?m), "*", "1") as ?max)
}

---

prefix : <http://w3c.github.io/wot-thing-description/visualization#>
# TODO one single template for local and external classes
template :externalClass(?label) {
    ?label " [shape=none,label=<"
        "<font face=\"mono\">"
            "<table border=\"0\" cellborder=\"1\" cellspacing=\"0\" color=\"#8c8c8c\">"
                format { "<tr><td bgcolor=\"#f2f2f2\"><b>%s</b></td></tr>" ?label }
            "</table>"
        "</font>"
    ">]"
} where {}

---

prefix sh: <http://www.w3.org/ns/shacl#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix : <http://w3c.github.io/wot-thing-description/visualization#>
template :subClassRelations(?ns) {
    ?source " -> " ?dest " [fillcolor=white];"
} where {
    ?sourceClass rdfs:subClassOf+ ?destClass .
    ?sourceShape a sh:NodeShape ;
           sh:targetClass ?sourceClass .
    ?destShape a sh:NodeShape ;
           sh:targetClass ?destClass .
    filter (isIRI(?sourceClass) && isIRI(?destClass))
    filter(strstarts(str(?sourceClass), str(?ns)))
    bind (strafter(str(?sourceClass), "#") as ?source)
    bind (strafter(str(?destClass), "#") as ?dest)
}

---

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix jsonld: <http://www.w3.org/ns/json-ld#>
prefix : <http://w3c.github.io/wot-thing-description/visualization#>
template :label(?term) {
    format { "%s" ?label }
} where {
    optional {
        ?m a jsonld:Mapping ;
            jsonld:iri ?term ;
            jsonld:term ?name .
        filter not exists { ?term a owl:Class }
    }
    bind (if(bound(?name), ?name, strafter(str(?term), "#")) as ?label)
}