prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :classes(?ns) {
    "<section>"

        format { "<h3><code>%s</code></h3>" st:call-template(:label, ?class) }
        
        if(?class = <https://www.w3.org/2019/wot/security#CertSecurityScheme> ||
           ?class = <https://www.w3.org/2019/wot/security#PoPSecurityScheme> ||
           ?class = <https://www.w3.org/2019/wot/security#PublicSecurityScheme>,
           "<p><span class=\"at-risk\">This section is at risk.</span></p>",
           ""
        )

        format { "<p>%s</p>" st:call-template(:desc, ?class) }

        format { "%s" st:call-template(:fields, ?class) }

        format { "%s" st:call-template(:subclasses, ?class) }

        format { "%s" st:call-template(:notes, ?class) }

    "</section>"
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class .
    filter(strstarts(str(?class), str(?ns)))
    optional { ?shape sh:order ?predefined }
    bind (if(bound(?predefined), ?predefined, "1000"^^xsd:integer) as ?rank)
} order by ?rank

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix jsonld: <http://www.w3.org/ns/json-ld#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :fields(?class) {
    "<table class=\"def\">"
        "<thead>"
            "<tr>"
                "<th><a>Vocabulary term</a></th>"
                "<th>Description</th>"
                "<th>Assignment</th>"
                "<th>Type</th>"
            "</tr>"
        "</thead>"
        format {
            "<tbody>%s%s%s%s%s</tbody>"
            # custom property for Thing (id = @id = IRI)
            if(?class = <https://www.w3.org/2019/wot/td#Thing>,
                concat("<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-context--Thing\">",
                       "<td><code>@context</code></td>",
                       "<td>JSON-LD keyword to define short-hand names called terms that are used throughout a TD document.</td>",
                       "<td>mandatory</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#anyURI\"><code>anyURI</code></a> or <a>Array</a></td>",
                       "</tr>",
                       "<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-type--Thing\">",
                       "<td><code>@type</code></td>",
                       "<td>JSON-LD keyword to label the object with semantic tags (or types).</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a> or <a>Array</a> of <a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a></td>",
                       "</tr>",
                       "<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-id--Thing\">",
                       "<td><code>id</code></td>",
                       "<td>Identifier of the Thing in form of a URI [[RFC3986]] (e.g., stable URI, temporary and mutable URI, URI with local IP address, URN, etc.).</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#anyURI\"><code>anyURI</code></a></td>",
                       "</tr>"
                ), "")
            if(?class = <https://www.w3.org/2019/wot/td#InteractionAffordance>,
                concat("<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-type--InteractionAffordance\">",
                       "<td><code>@type</code></td>",
                       "<td>JSON-LD keyword to label the object with semantic tags (or types).</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a> or <a>Array</a> of <a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a></td>",
                       "</tr>"
                ), "")
            if(?class = <https://www.w3.org/2019/wot/json-schema#DataSchema>,
                concat("<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-type--DataSchema\">",
                       "<td><code>@type</code></td>",
                       "<td>JSON-LD keyword to label the object with semantic tags (or types)</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a> or <a>Array</a> of <a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a></td>",
                       "</tr>"
                ), "")
            if(?class = <https://www.w3.org/2019/wot/security#SecurityScheme>,
                concat("<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-at-type--SecurityScheme\">",
                       "<td><code>@type</code></td>",
                       "<td>JSON-LD keyword to label the object with semantic tags (or types).</td>",
                       "<td>optional</td>",
                       "<td><a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a> or <a>Array</a> of <a href=\"http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#string\"><code>string</code></a></td>",
                       "</tr>"
                ), "")
            st:call-template(:field, ?class)
        }
    "</table>"
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class .
    filter exists {
        ?shape sh:property ?propShape .
        ?propShape sh:path ?prop .
    }
}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix jsonld: <http://www.w3.org/ns/json-ld#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :field(?class) {
    format { "<tr class=\"rfc2119-table-assertion\" id=\"td-vocab-%s" st:call-template(:label, ?prop) }
    format { "--%s\">" st:call-template(:label, ?class) }
        "<td>"
            format { "<code>%s</code>" st:call-template(:label, ?prop) }
        "</td>"
        "<td>"
            format { "%s" st:call-template(:desc, ?prop) }
            if (?prop = <https://www.w3.org/2019/wot/td#hasForm>,
                if(?class = <https://www.w3.org/2019/wot/td#Thing>,
                  " In this version of TD, all operations that can be described at the Thing level are concerning how to interact with the Thing's <a href=\"#propertyaffordance\">Properties</a> collectively at once.", ""
                ) , ""
            )
            if (?prop = <https://www.w3.org/2019/wot/td#baseUri>,
                  "<br/><br/><code>base</code> does not affect the URIs used in <code>@context</code> and the IRIs used within Linked Data [[?LINKED-DATA]] graphs that are relevant when semantic processing is applied to TD instances.", ""
            )
            if (?prop = <https://www.w3.org/2019/wot/json-schema#format>,
                  " (Also see below.)", ""
            )
        "</td>"
        "<td>"
            format {
                "%s"
                if(?hasDef || ?prop = <https://www.w3.org/2019/wot/hypermedia#forOperationType>,
                   "<a href=\"#sec-default-values\">with default</a>",
                   if(?mandatory, "mandatory", "optional"))
            }
        "</td>"
        "<td>"
            format {
                # TODO use path expressions like sh:oneOrMorePath instead?
                "%s%s"
                if(?prop = <https://www.w3.org/2019/wot/hypermedia#forOperationType> ||
                   ?prop = <https://www.w3.org/2019/wot/json-schema#items> ||
                   ?prop = <https://www.w3.org/2019/wot/td#hasSecurityConfiguration> ||
                   ?prop = <https://www.w3.org/2019/wot/security#scopes>,
                   concat(st:call-template(:type, ?class, ?prop),
                          " or <a>Array</a> of ",
                          st:call-template(:type, ?class, ?prop)),
                   if(?array,
                      "<a>Array</a> of ",
                      if(?map, "<a>Map</a> of ", "")))
                if(?prop = <https://www.w3.org/2019/wot/hypermedia#forOperationType> ||
                   ?prop = <https://www.w3.org/2019/wot/json-schema#items> ||
                   ?prop = <https://www.w3.org/2019/wot/td#hasSecurityConfiguration> ||
                   ?prop = <https://www.w3.org/2019/wot/security#scopes>,
                   "",
                   if(?hasType, st:call-template(:type, ?class, ?prop), "any type"))
            }
            format {
                "%s%s%s"
                if(?hasEnum, " (", "")
                st:call-template(:enum, ?class, ?prop)
                if(?hasEnum, ")", "")
            }
        "</td>"
    "</tr>"
} where {
    ?shape a sh:NodeShape ;
        sh:targetClass ?class ;
        sh:property ?propShape .
    ?propShape sh:path ?prop .
    optional { ?propShape sh:datatype|sh:class ?type }
    optional { ?propShape sh:minCount ?count }
    optional {
        ?mSet a jsonld:Mapping ;
        jsonld:iri ?prop ;
        jsonld:container jsonld:set
    }
    optional {
        ?mIndex a jsonld:Mapping ;
        jsonld:iri ?prop ;
        jsonld:container jsonld:index
    }
    optional {
        ?propShape sh:in ?list
    }
    optional { ?propShape sh:defaultValue ?def  }
    bind (bound(?count) as ?mandatory)
    bind (bound(?def) as ?hasDef)
    bind (bound(?mSet) as ?array)
    bind (bound(?mIndex) as ?map)
    bind (bound(?type) as ?hasType)
    bind (bound(?list) as ?hasEnum)
    optional { ?propShape sh:order ?predefined }
    bind (if(bound(?predefined), ?predefined, "1000"^^xsd:integer) as ?rank)
} order by ?rank

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :type(?class ?prop) {
    format {
        "<a href=\"%s\"><code>%s</code></a>"
        st:call-template(:href, ?type)
        st:call-template(:label, ?type)
    }
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           sh:property ?propShape .
    ?propShape sh:path ?prop .
    { ?propShape sh:datatype ?type }
    union
    { ?propShape sh:class ?type }
}

---

prefix sh: <http://www.w3.org/ns/shacl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :enum(?class ?prop) {
    format {
        "%s<code>%s</code>%s"
        if(?first,
           if (?prop = <https://www.w3.org/2019/wot/hypermedia#forSubProtocol> ||
               ?prop = <https://www.w3.org/2019/wot/security#alg> ||
               ?prop = <https://www.w3.org/2019/wot/security#format> ||
               ?prop = <https://www.w3.org/2019/wot/security#flow> ||
               ?prop = <https://www.w3.org/2019/wot/security#scheme>,
               "e.g., ",
               "one of "),
           if(?last, "or ", ""))
        ?val
        if(?last, "", ", ")
    }; separator = ""
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           sh:property ?propShape .
    ?propShape sh:path ?prop ;
               sh:in ?list .
    ?list rdf:rest* ?r .
    ?r rdf:first ?val .
    ?r rdf:rest ?next
    bind ((?list = ?r) as ?first)
    bind ((?next = rdf:nil) as ?last)
}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :subclasses(?class) {
    "<p>"
        "The class "
        format { "<code>%s</code>" st:call-template(:label, ?class) }
        " has the following subclasses:"
    "</p>"
    "<ul>"
        st:call-template(:subclass, ?class)
    "</ul>"
} where {
    ?subclass rdfs:subClassOf+ ?class .
}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix sh: <http://www.w3.org/ns/shacl#>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :subclass(?class) {
    "<li>"
        format {
            "<a href=\"%s\"><code>%s</code></a>"
            st:call-template(:href, ?subclass)
            st:call-template(:label, ?subclass)
        }
    "</li>"
} where {
    ?subclass rdfs:subClassOf+ ?class .
    ?subclassShape a sh:NodeShape ;
        sh:targetClass ?subclass .
    ?classShape a sh:NodeShape ;
        sh:targetClass ?class .
    filter (isIRI(?subclass) &&
            isIRI(?class) &&
            # same namespace restriction
            strbefore(str(?class), "#") = strbefore(str(?subclass), "#"))
    optional { ?subclassShape sh:order ?predefined }
    bind (if(bound(?predefined), ?predefined, "1000"^^xsd:integer) as ?rank)
} order by ?rank

---

prefix sh: <http://www.w3.org/ns/shacl#>
prefix rdf: <http://www.w3.org/1999/02/22-rdf-syntax-ns#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :notes(?class) {
    format { "%s" ?note } ; separator = ""
} where {
    ?shape a sh:NodeShape ;
           sh:targetClass ?class ;
           sh:description ?note .
    filter (datatype(?note) = rdf:HTML)
}


---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix xsd: <http://www.w3.org/2001/XMLSchema#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :href(?term) {
    if(strstarts(str(?term), "http://www.w3.org/2001/XMLSchema#"),
        st:call-template(:href-xsd, ?term),
        st:call-template(:href-fragment, ?term))
} where {}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :href-xsd(?term) {
    format {
        "http://www.w3.org/TR/2012/REC-xmlschema11-2-20120405/#%s"
        st:call-template(:label, ?term)
    }
} where {}

---

prefix st: <http://ns.inria.fr/sparql-template/>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :href-fragment(?term) {
    format {
        "#%s"
        lcase(st:call-template(:label, ?term))
    }
} where {}

---

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix owl: <http://www.w3.org/2002/07/owl#>
prefix jsonld: <http://www.w3.org/ns/json-ld#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :label(?term) {
    format { "%s" ?label }
} where {
    optional {
        ?m a jsonld:Mapping ;
            jsonld:iri ?term ;
            jsonld:term ?name .
        filter not exists { ?term a owl:Class }
    }
    bind (if(bound(?name), ?name, strafter(str(?term), "#")) as ?label)
}

---

prefix rdfs: <http://www.w3.org/2000/01/rdf-schema#>
prefix : <http://w3c.github.io/wot-thing-description/#>
template :desc(?term) {
    format {
        "%s%s"
        if(strends(?desc, "."), ?desc, concat(?desc, "."))
        if(?term = <https://www.w3.org/2019/wot/td#MultiLanguage>, 
            " See <a href=\"#titles-descriptions-serialization-json\"></a> for example usages of this container in a Thing Description instance.",
            "")

    } ; separator = " "
} where {
    ?term rdfs:comment ?desc .
}
